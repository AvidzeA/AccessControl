import javax.swing.*;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.io.*;


public class BigPanel extends javax.swing.JFrame {

    /**
     * Creates new form ContactEditorUI
     */
    public String currentText = "";
    public String CurrentFileName = "";
    String[] alphabet = {"_", "А", "Б", "В", "Г", "Д", "Е", "Ж", "З", "И", "К", "Л", "М", "Н", "О", "П", "Р", "С",
            "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я"};
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;

    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;

    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;

    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextArea1;
    public BigPanel(String[] mods ) {

        initComponents();
        for (int i=0; i<mods.length;i++) {
            switch(mods[i]) {
                case "0":
                    jMenuItem18.setEnabled(true);
                    jMenuItem26.setEnabled(true);
                    break;
                case "1":
                    jMenuItem19.setEnabled(true);
                    jMenuItem27.setEnabled(true);
                    break;
                case "2":
                    jMenuItem20.setEnabled(true);
                    jMenuItem28.setEnabled(true);
                    break;
                case "3":
                    jMenuItem21.setEnabled(true);
                    jMenuItem29.setEnabled(true);
                    break;
                case "4":
                    jMenuItem7.setEnabled(true);
                    jMenuItem11.setEnabled(true);
                    break;
                case "5":
                    jMenuItem8.setEnabled(true);
                    jMenuItem12.setEnabled(true);
                    break;
                case "6":
                    jMenuItem9.setEnabled(true);
                    jMenuItem13.setEnabled(true);
                    break;
                case "7":
                    jMenuItem10.setEnabled(true);
                    jMenuItem14.setEnabled(true);
                    break;
                case "8":
                    jMenuItem22.setEnabled(true);
                    jMenuItem30.setEnabled(true);
                    break;
                case "9":
                    jMenuItem23.setEnabled(true);
                    jMenuItem31.setEnabled(true);
                    break;
                case "10":
                    jMenuItem24.setEnabled(true);
                    jMenuItem32.setEnabled(true);
                    break;
                case "11":
                    jMenuItem25.setEnabled(true);
                    jMenuItem33.setEnabled(true);
                    break;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
        FileDialog fd = new FileDialog((java.awt.Frame) null, "Choose a file", FileDialog.LOAD);
        fd.setFile("*.txt");
        fd.setVisible(true);
        String dir = fd.getDirectory();
        String name = fd.getFile();
        if (dir != null && name != null) {
            String filename = dir + name;
            try {
                File loadData = new File(filename);
                BufferedReader reader = new BufferedReader(new FileReader(loadData));
                String line = reader.readLine();
                if (line != null) {
                    jTextArea1.append(line + "\n");
                }
                reader.close();
                jTextArea1.setEditable(true);
                jMenuItem3.setEnabled(true);
                jMenu2.setEnabled(true);
                jMenu3.setEnabled(true);
                CurrentFileName = filename;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            File loadData = new File(CurrentFileName);
            FileWriter fileWriter = new FileWriter(loadData);
            String toType = "";
            for (String line : jTextArea1.getText().split("\\n")) {
                toType = line;
            }
            fileWriter.write(toType);
            fileWriter.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void gamm(java.awt.event.ActionEvent evt) {
        currentText = "Гаммирование – метод криптографического преобразования, заключающийся в том, что символы шифруемого текста складываются\n" +
                " с символами некоторой случайной последовательности, называемой гаммой шифра или ключевой гаммой. Стойкость шифрования определяется длиной (периодом) неповторяющейся части гаммы шифра,\n" +
                " а также сложностью предугадывания следующих элементов гаммы по предыдущим.\n\n" +
                "Гаммирование на основе ключевого слова: ключевая гамма - слово, состоящее из символов используемого алфавита. При зашифровании, каждый символ открытого текста\n" +
                "и ключа представляется в виде пятиразрядного двоичного числа (для данного алфавита). Каждый символ открытого текста(ОТ) и ключа имеет порядковый номер.\n" +
                "Рассматриваются два символа из ОТ и ключа с одинаковыми порядковыми номерами (если длина ОТ превышает длину ключа, ключ начинает циклично повторяться).\n" +
                "Выполняем побитовое сложение по модулю 2 кодов символов ОТ и ключа. Полученное число - код символа шифра. \n" +
                "Расшифрование проводится тем же образом (побитово по модулю 2 складываются коды символов закрытого текста и ключа, результат - код символа открытого текста).";
        CodePanel input = new CodePanel();
        input.setLocationRelativeTo(this);
        String code = input.getName();
        int maxOffset = code.length();
        String[] bitCodeMas = code.split("");
        String[] bitCodeMasBIN = new String[maxOffset+1];
        for (int i = 0; i<maxOffset;i++) {
            for (int j = 0; j < 32; j++) {
                if(alphabet[j].equals(bitCodeMas[i])) {
                    String tempBinaryCode = "";
                    tempBinaryCode=Integer.toBinaryString(j);
                    while (tempBinaryCode.length() <5) {
                        tempBinaryCode = "0"+tempBinaryCode;
                    }
                    bitCodeMasBIN[i]=tempBinaryCode;
                }
            }
        }

        String lineToCode = "";
        for (String line : jTextArea1.getText().split("\\n")) {
            lineToCode = line;
        }
        String[] inputMass = lineToCode.split("");
        int l = inputMass.length;
        String encodedLine = "";
        String tempBinaryCode = "";

        int curOffset = 0;
        for (int i = 0; i < l; i++) {
            boolean isInAlphabet = false;
            for (int j = 0; j < 32; j++) {
                String element = inputMass[i];
                if(alphabet[j].equals(element)) {
                    isInAlphabet = true;
                    String resultBinaryCode = "";
                    int regCode = j;
                    tempBinaryCode = Integer.toBinaryString(regCode);
                    while (tempBinaryCode.length() <5) {
                        tempBinaryCode = "0"+tempBinaryCode;
                    }
                    String[] codeBinOT = tempBinaryCode.split("");
                    String[] codeBinKEY = bitCodeMasBIN[curOffset].split("");
                    for (int k =0; k<5; k++) {
                        resultBinaryCode+=(Integer.parseInt(codeBinOT[k])+Integer.parseInt(codeBinKEY[k]))%2;
                    }
                    regCode = Integer.parseInt(resultBinaryCode,2);
                    encodedLine+=alphabet[regCode];
                }
            }
            if (!isInAlphabet) {
                encodedLine+=inputMass[i];
            }
            curOffset++;
            if (curOffset>=maxOffset) {
                curOffset = 0;
            }
        }
        jMenuItem16.setEnabled(true);
        jTextArea1.append(encodedLine+'\n');

    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {
        FileDialog fd = new FileDialog((java.awt.Frame) null, "Choose a file", FileDialog.SAVE);
        fd.setFile("*.txt");
        fd.setVisible(true);
        String dir = fd.getDirectory();
        String name = fd.getFile();
        if (dir != null && name != null) {
            String filename = dir + name;
            try {
                File loadData = new File(filename);
                FileWriter fileWriter = new FileWriter(loadData);
                String toType = "";
                for (String line : jTextArea1.getText().split("\\n")) {
                    toType = line;
                }
                fileWriter.write(toType);
                CurrentFileName = filename;
                fileWriter.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "Контроль доступа.\n\n" +
                        "Программа реализует иллюстрирует управление доступом.\n"
                        + "Реализована система с многоразовыми паролями на индивидуальных разрешениях.\n"
                        + "Каждый рользователь системы имеет доступ к набору из трех методов шифрования.\n"
                        + "Используемый алфавит в методах шифрования:\n" + "[\"_\",\"А\",\"Б\",\"В\",\"Г\",\"Д\",\"Е\",\"Ж\",\"З\",\"И\",\"К\",\"Л\",\"М\",\"О\",\"Н\",\"П\",\"Р\",\"С\"," +
                        "\"Т\",\"У\",\"Ф\",\"Х\",\"Ц\",\"Ч\",\"Ш\",\"Щ\",\"Ъ\",\"Ы\",\"Ь\",\"Э\",\"Ю\",\"Я\"]\n\n"
                        + "Автор: Кузнецов Станислав, ИПБ-18.", "О программе",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {
        JOptionPane.showMessageDialog(this, currentText, "Помощь",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
        jTextArea1.setEditable(true);
        jMenuItem3.setEnabled(true);
        jMenu2.setEnabled(true);
        jMenu3.setEnabled(true);

        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
    }

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {
        currentText = "В случае побитовой векторной перестановки местами в соответствии с вектором перестановки меняются биты в двоичном эквиваленте кода символа используемого алфавита.\n" +
                " При этом следует помнить, что нумерация битов в двоичном числе начинается справа налево, первый бит имеет номер 0.\n" +
                " Для букв используемого алфавита двоичные эквиваленты кодов – пятиразрядные, т.е. вектор перестановки, например, может иметь вид 20431.\n\n" +
                "При зашифровании, представляем порядковые номера битов, кодирующих символ (в двоичной форме, из алфавита), как [4,3,2,1,0], а ключ (из примера), как [2,0,4,3,1].\n" +
                "Выполняем перестановку битов символа, в соответствии с порядковыми номерами из ключа. Используем полученное двоичное число, чтобы получить новый закрытый символ.\n\n" +
                "Для расшифрования, принимаем порядковые номера в соответствии с ключом, а \"ключ\" принимаем как [4,3,2,1,0]. Используем полученное число, чтобы получить новый открытый символ.";
        CodePanel input = new CodePanel();
        input.setLocationRelativeTo(this);
        String code = input.getName();
        String[] bitCodeMas = code.split("");

        String lineToCode = "";
        for (String line : jTextArea1.getText().split("\\n")) {
            lineToCode = line;
        }
        String[] inputMass = lineToCode.split("");
        int l = inputMass.length;
        String encodedLine = "";
        String tempBinaryCode = "";

        for (int i = 0; i < l; i++) {
            for (int j = 0; j < 32; j++) {
                String element = inputMass[i];
                if (alphabet[j].equals(element)) {
                    String resultBinaryCode = "";
                    int regCode = j;
                    tempBinaryCode = Integer.toBinaryString(regCode);
                    while (tempBinaryCode.length() < 5) {
                        tempBinaryCode = "0" + tempBinaryCode;
                    }
                    String[] codeToPere = tempBinaryCode.split("");
                    for (int k = 0; k < 5; k++) {
                        resultBinaryCode += codeToPere[4 - Integer.parseInt(bitCodeMas[k])];
                    }
                    regCode = Integer.parseInt(resultBinaryCode, 2);
                    encodedLine += alphabet[regCode];
                }
            }
        }
        jMenuItem16.setEnabled(true);
        jTextArea1.append(encodedLine + '\n');

    }
    private void monoTo(java.awt.event.ActionEvent evt) {
        currentText = "При моноалфавитной замене каждой букве алфавита открытого\n" +
                "текста ставится в соответствие одна буква закрытого текста из этого же \n"
                +"алфавита.\n\n"+ "Моноалфавитная замена может выполняться двумя способами: на \n"
                +"основе таблицы замены и на основе преобразований замены.\n\n"+"В данном случае реализован второй вариант.\n"+
                "Уравнение зашифрования в общем случае имеет вид:\n" +
                "\n" +
                "yi = (xi + k)mod n,\t\n"+"где\t yi – код  i –го символа закрытого текста;\n" +
                "xi – код  i –го символа открытого текста;\n" +
                "k – смещение;\n" +
                "n = 32 – степень подстановки.\n\n" +
                "Уравнение расшифрования соответственно будет равно:\n" +
                "\n" +
                "xi = (n  + yi – k)mod n.\n" +
                "В этих уравнениях константа k, получившая название смещение, является ключом.\n";
        CodePanelMono input = new CodePanelMono();
        input.setLocationRelativeTo(this);
        String code = input.getName();

        String lineToCode = "";
        for (String line : jTextArea1.getText().split("\\n")) {
            lineToCode = line;
        }
        String[] inputMass = lineToCode.split("");
        int l = inputMass.length;
        String encodedLine = "";
        for (int i = 0; i < l; i++) {
            boolean notInAlphabet = true;
            for (int j = 0; j < 32; j++) {
                if(alphabet[j].equals(inputMass[i])) {
                    notInAlphabet = false;
                    int regCode = (j+Integer.parseInt(code))%32;
                    if (regCode < 0) {
                        regCode+=32;
                    }
                    encodedLine+=alphabet[regCode];
                }
            }
            if (notInAlphabet) {
                encodedLine+=inputMass[i];
            }
        }
        jMenuItem16.setEnabled(true);
        jTextArea1.append(encodedLine+'\n');

    }
    private void monoOut(java.awt.event.ActionEvent evt) {
        currentText = "При моноалфавитной замене каждой букве алфавита открытого\n" +
                "текста ставится в соответствие одна буква закрытого текста из этого же \n"
                +"алфавита.\n\n"+ "Моноалфавитная замена может выполняться двумя способами: на \n"
                +"основе таблицы замены и на основе преобразований замены.\n\n"+"В данном случае реализован второй вариант.\n"+
                "Уравнение зашифрования в общем случае имеет вид:\n" +
                "\n" +
                "yi = (xi + k)mod n,\t\n"+"где\t yi – код  i –го символа закрытого текста;\n" +
                "xi – код  i –го символа открытого текста;\n" +
                "k – смещение;\n" +
                "n = 32 – степень подстановки.\n\n" +
                "Уравнение расшифрования соответственно будет равно:\n" +
                "\n" +
                "xi = (n  + yi – k)mod n.\n" +
                "В этих уравнениях константа k, получившая название смещение, является ключом.\n";
        CodePanelMono input = new CodePanelMono();
        input.setLocationRelativeTo(this);
        String code = input.getName();
        if (!code.equals("Z")) {
            String lineToDecode = "";
            for (String line : jTextArea1.getText().split("\\n")) {
                lineToDecode = line;
            }
            String[] inputMass = lineToDecode.split("");
            int l = inputMass.length;
            String decodedLine = "";
            for (int i = 0; i < l; i++) {
                boolean notInAlphabet = true;
                for (int j = 0; j < 32; j++) {

                    if(alphabet[j].equals(inputMass[i])) {
                        notInAlphabet = false;
                        int regCode = (32+j-Integer.parseInt(code))%32;
                        if (regCode < 0) {
                            regCode+=32;
                        }
                        decodedLine+=alphabet[regCode];
                    }
                }
                if (notInAlphabet) {
                    decodedLine+=inputMass[i];
                }

            }
            jMenuItem16.setEnabled(true);
            jTextArea1.append(decodedLine+'\n');
        }
    }

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {
        NoMethod nm = new NoMethod();
        nm.setLocationRelativeTo(this);
        nm.ifClosed();
    }

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {
        currentText = "В случае побитовой векторной перестановки местами в соответствии с вектором перестановки меняются биты в двоичном эквиваленте кода символа используемого алфавита.\n" +
                " При этом следует помнить, что нумерация битов в двоичном числе начинается справа налево, первый бит имеет номер 0.\n" +
                " Для букв используемого алфавита двоичные эквиваленты кодов – пятиразрядные, т.е. вектор перестановки, например, может иметь вид 20431.\n\n" +
                "При зашифровании, представляем порядковые номера битов, кодирующих символ (в двоичной форме, из алфавита), как [4,3,2,1,0], а ключ (из примера), как [2,0,4,3,1].\n" +
                "Выполняем перестановку битов символа, в соответствии с порядковыми номерами из ключа. Используем полученное двоичное число, чтобы получить новый закрытый символ.\n\n" +
                "Для расшифрования, принимаем порядковые номера в соответствии с ключом, а \"ключ\" принимаем как [4,3,2,1,0]. Используем полученное число, чтобы получить новый открытый символ.";
        CodePanel input = new CodePanel();
        input.setLocationRelativeTo(this);
        String code = input.getName();
        String[] bitCodeMas = code.split("");

        String lineToCode = "";
        for (String line : jTextArea1.getText().split("\\n")) {
            lineToCode = line;
        }
        String[] inputMass = lineToCode.split("");
        int l = inputMass.length;
        String encodedLine = "";
        String tempBinaryCode = "";

        for (int i = 0; i < l; i++) {
            for (int j = 0; j < 32; j++) {
                String element = inputMass[i];
                if (alphabet[j].equals(element)) {
                    String resultBinaryCode = "";
                    String[] resultTempMas = new String[5];
                    int regCode = j;
                    tempBinaryCode = Integer.toBinaryString(regCode);
                    while (tempBinaryCode.length() < 5) {
                        tempBinaryCode = "0" + tempBinaryCode;
                    }
                    String[] codeToPere = tempBinaryCode.split("");
                    for (int k = 0; k < 5; k++) {
                        resultTempMas[Integer.parseInt(bitCodeMas[k])] = codeToPere[k];
                    }
                    for (int k = 4; k >= 0; k--) {
                        resultBinaryCode += resultTempMas[k];
                    }
                    regCode = Integer.parseInt(resultBinaryCode, 2);
                    encodedLine += alphabet[regCode];
                }
            }
        }
        jMenuItem16.setEnabled(true);
        jTextArea1.append(encodedLine + '\n');

    }

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {
        NoMethod nm = new NoMethod();
        nm.setLocationRelativeTo(this);
        nm.ifClosed();
    }

    private void initComponents() {


        jPanel1 = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea(30, 30);
        MaximumSizeFilter filter = new MaximumSizeFilter(30, 30);
        ((PlainDocument) jTextArea1.getDocument()).setDocumentFilter(filter);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();

        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();

        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenuItem33 = new javax.swing.JMenuItem();

        jMenuItem18.setEnabled(false);
        jMenuItem19.setEnabled(false);
        jMenuItem20.setEnabled(false);
        jMenuItem21.setEnabled(false);
        jMenuItem22.setEnabled(false);
        jMenuItem23.setEnabled(false);
        jMenuItem24.setEnabled(false);
        jMenuItem25.setEnabled(false);

        jMenuItem7.setEnabled(false);
        jMenuItem8.setEnabled(false);
        jMenuItem9.setEnabled(false);
        jMenuItem10.setEnabled(false);
        jMenuItem11.setEnabled(false);
        jMenuItem12.setEnabled(false);
        jMenuItem13.setEnabled(false);
        jMenuItem14.setEnabled(false);

        jMenuItem26.setEnabled(false);
        jMenuItem27.setEnabled(false);
        jMenuItem28.setEnabled(false);
        jMenuItem29.setEnabled(false);
        jMenuItem30.setEnabled(false);
        jMenuItem31.setEnabled(false);
        jMenuItem32.setEnabled(false);
        jMenuItem33.setEnabled(false);

        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(Color.white);
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );

        jMenu1.setText("              Файл                ");

        jMenuItem1.setText("Создать ");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Открыть ");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Сохранить ");
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Сохранить как ");
        jMenu1.add(jMenuItem4);
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Выход       ");
        jMenu1.add(jMenuItem6);

        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });

        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });

        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });

        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });

        //new stuff
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monoTo(evt);
            }
        });
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamm(evt);
            }
        });
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monoOut(evt);
            }
        });
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamm(evt);
            }
        });
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenuItem33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });


        jMenuBar1.add(jMenu1);

        jMenu2.setText("       Зашифровать         ");

        jMenuItem18.setText("Моноалфавитная ");
        jMenu2.add(jMenuItem18);

        jMenuItem19.setText("Гомофоническая ");
        jMenu2.add(jMenuItem19);

        jMenuItem20.setText("Полиалфавитная ");
        jMenu2.add(jMenuItem20);

        jMenuItem21.setText("Полиграммная ");
        jMenu2.add(jMenuItem21);

        jMenuItem7.setText("Маршрутная ");
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Вертикальная ");
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Посимвольная ");
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Побитовая");
        jMenu2.add(jMenuItem10);

        jMenuItem22.setText("Гаммир. с ПСЧ ");
        jMenu2.add(jMenuItem22);

        jMenuItem23.setText("Гаммир. с ключом ");
        jMenu2.add(jMenuItem23);

        jMenuItem24.setText("Шифр Вижинера ");
        jMenu2.add(jMenuItem24);

        jMenuItem25.setText("Шифр Бофора ");
        jMenu2.add(jMenuItem25);



        jMenuBar1.add(jMenu2);

        jMenu3.setText("           Расшифровать            ");

        jMenuItem26.setText("Моноалфавитная ");
        jMenu3.add(jMenuItem26);

        jMenuItem27.setText("Гомофоническая ");
        jMenu3.add(jMenuItem27);

        jMenuItem28.setText("Полиалфавитная ");
        jMenu3.add(jMenuItem28);

        jMenuItem29.setText("Полиграммная ");
        jMenu3.add(jMenuItem29);

        jMenuItem11.setText("Маршрутная ");
        jMenu3.add(jMenuItem11);

        jMenuItem12.setText("Вертикальная ");
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("Посимвольная ");
        jMenu3.add(jMenuItem13);

        jMenuItem14.setText("Побитовая");
        jMenu3.add(jMenuItem14);

        jMenuItem30.setText("Гаммир. с ПСЧ ");
        jMenu3.add(jMenuItem30);

        jMenuItem31.setText("Гаммир. с ключом ");
        jMenu3.add(jMenuItem31);

        jMenuItem32.setText("Шифр Вижинера ");
        jMenu3.add(jMenuItem32);

        jMenuItem33.setText("Шифр Бофора ");
        jMenu3.add(jMenuItem33);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("          Справка         ");

        jMenuItem15.setText("О программе");
        jMenu4.add(jMenuItem15);
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });

        jMenuItem16.setText("Помощь ");
        jMenu4.add(jMenuItem16);
        jMenuItem16.setEnabled(false);
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });


        jMenuBar1.add(jMenu4);

        jMenuItem17.setText("     Выход ");
        jMenuBar1.add(jMenuItem17);

        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        setTitle("Управление доступом ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenuItem3.setEnabled(false);
        jMenu2.setEnabled(false);
        jMenu3.setEnabled(false);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BigPanel(args).setVisible(true);
            }
        });
    }// </editor-fold>
}